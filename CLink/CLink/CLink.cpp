#include <iostream>
#include "CLink.h"

using namespace std;

/*******************************************************************************
* 函数功能: 默认构造函数
* 参    数: [IN]
* 返 回 值: 
* 备    注：
*******************************************************************************/
template <typename T>
CCLink<T>::CCLink()
{
	m_dataArray = NULL;
}


/*******************************************************************************
* 函数功能: 析构函数，释放init时动态分配的数组内存
* 参    数: [IN] 
* 返 回 值: 
* 备    注：
*******************************************************************************/
template <typename T>
CCLink<T>::~CCLink()
{
	delete[] m_dataArray;
	m_dataArray = NULL;
}


/*******************************************************************************
* 函数功能: 重载下标操作符
* 参    数: [IN] int index, 下标索引
* 返 回 值: T&,返回CCLink下标索引处存储的数据
* 备    注：
*******************************************************************************/
template <typename T>
T& CCLink<T>::operator[](const int index)
{
	return m_dataArray[index];
}


/*******************************************************************************
* 函数功能: 重载下标操作符的const版本
* 参    数: [IN] int index, 下标索引 
* 返 回 值: T&,返回CCLink下标索引处存储的数据
* 备    注：
*******************************************************************************/
template <typename T>
const T& CCLink<T>::operator[](const int index)const
{
	return m_dataArray[index];
}


/*******************************************************************************
* 函数功能: 静态链表的初始化
* 参    数: [IN] int n，静态链表初始化大小
* 返 回 值: true，初始化成功；false，初始化失败
* 备    注：
*******************************************************************************/
template <typename T>
bool CCLink<T>::Init(const int n)
{
	if (idAllocator.Init(n))
	{
		if (m_dataArray != NULL) //考虑到一个CCLink对象调用一次Init()后，再次重新调用Init()，进行重新初始化
		{
			delete[] m_dataArray;
			m_dataArray = NULL;
		}

		m_dataArray = new T[n];
		if (!m_dataArray)
		{
			return false;
		}
		return true;
	}

	return false;
}


/*******************************************************************************
* 函数功能: 分配空间
* 参    数: [IN] 无
* 返 回 值: int，返回一个静态链表中可存储数据的下标
* 备    注：
*******************************************************************************/
template <typename T>
int CCLink<T>::Alloc()
{
	return idAllocator.Alloc();
}

/*******************************************************************************
* 函数功能: 释放空间
* 参    数: [IN] int id，要释放的空间的下标
* 返 回 值: 
* 备    注：
*******************************************************************************/
template <typename T>
void CCLink<T>::Free(const int id)
{
	idAllocator.Free(id);
	memset((m_dataArray+id), 0, sizeof(T));
}

/*******************************************************************************
* 函数功能: 判断一个id标识的空间是否被分配
* 参    数: [IN] int id，要判断某一空间是否被分配的空间下标
* 返 回 值: true，空间被分配到；false，空间未被分配
* 备    注：
*******************************************************************************/
template <typename T>
bool CCLink<T>::IsAlloc(const int id)
{
	return idAllocator.IsAlloc(id);
}